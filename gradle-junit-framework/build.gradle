buildscript {
    repositories {
        mavenCentral()
        google()
    }
    dependencies {
        classpath "io.qameta.allure:allure-gradle:2.3"
    }
}

plugins {
    id('java')
    id('idea')
    id('io.qameta.allure') version('2.8.1')
}

group 'ru.ojhfoi.framework'
version '1.0'

def allureVersion = '2.24.0'
def junitVersion = '5.8.2'
def aspectjVersion = '1.9.20'
def lombockVersion = '1.18.24'
def webdriverManagerVersion = '5.5.3'
def ownerVersion = '1.0.12'
def seleniumVersion = '4.1.1'
def log4jVersion = '2.20.0'

allprojects {

    apply plugin: 'java'
    apply plugin: 'io.qameta.allure'
    apply plugin: 'java-library'
    apply plugin: 'idea'

    repositories {
        maven {
            url "https://mvnrepository.com"
            mavenContent {
                releasesOnly()
            }
            metadataSources {
                artifact()
                mavenPom()
            }
        }
        mavenLocal()
        jcenter()
    }

    tasks.withType(Test).configureEach {
        systemProperty('junit.jupiter.extensions.autodetection.enabled', 'true')
        useJUnitPlatform()
    }


    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(11)
        }
    }

    configurations {
        register("testCompile")
    }

    compileJava {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    allure {
        version = allureVersion
        aspectjweaver = true
        autoconfigure = true
        resultsDir = file("./allure/allure-results")
        reportDir = file("./allure/allure-reports")
        useJUnit5 {
            version = allureVersion
        }
        clean
    }

    dependencies {
        //JUnit
//        testImplementation(group:'org.junit', name:'junit-bom', version:"${junitVersion}")
        testImplementation(group:'org.junit.jupiter', name:'junit-jupiter-api', version:"${junitVersion}")
        implementation(group:'org.junit.jupiter', name:'junit-jupiter-api', version:"${junitVersion}")
        testImplementation(group:'org.junit.jupiter', name:'junit-jupiter', version:"${junitVersion}")

        //Other
        implementation(group:'org.seleniumhq.selenium', name:'selenium-java', version:"${seleniumVersion}")
        implementation(group:'io.github.bonigarcia', name:'webdrivermanager', version:"${webdriverManagerVersion}")
        implementation(group:'org.aeonbits.owner', name:'owner', version:"${ownerVersion}")

        //Lombok org.projectlombok:lombok:1.18.24
        compileOnly(group:'org.projectlombok', name:'lombok', version:"${lombockVersion}")
        annotationProcessor(group:'org.projectlombok', name:'lombok', version:"${lombockVersion}")
        testAnnotationProcessor(group:'org.projectlombok', name:'lombok', version:"${lombockVersion}")
        testCompileOnly(group:'org.projectlombok', name:'lombok', version:"${lombockVersion}")

        //log4j org.apache.logging.log4j:log4j-bom
        implementation(group:'org.apache.logging.log4j', name:'log4j-bom', version:"${log4jVersion}")
        implementation(group:'org.apache.logging.log4j', name:'log4j-api', version:"${log4jVersion}")
        runtimeOnly(group:'org.apache.logging.log4j', name:'log4j-core', version:"${log4jVersion}")
        runtimeOnly(group:'org.aspectj', name:'aspectjweaver', version:"${aspectjVersion}")
        implementation(group: 'org.slf4j', name: 'slf4j-log4j12', version: '2.0.9', ext: 'pom')

        //Allure "io.qameta.allure:allure-java-commons:2.24.0"
        implementation(group:'io.qameta.allure', name:'allure-java-commons', version:"${allureVersion}")
        testImplementation(group:'io.qameta.allure', name:'allure-junit5', version:"${allureVersion}")
    }
}